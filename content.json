{"pages":[{"title":"关于博主","text":"大家好～&emsp;&emsp;博主普通二本高校计科大四学生，即将毕业；&emsp;&emsp;四年在社团方面虽有一些小成就，也找到了自己的兴趣所在，锻炼了自己；&emsp;&emsp;但在计算机技术方面的成长缺泛泛可陈；&emsp;&emsp;万幸倒也在大学的最后找到了自己想要努力的，内心认可的方向；&emsp;&emsp;站主本科计科嵌入式方向，目前正在自学转JAVA，在这方面还是一个小学生；&emsp;&emsp;还有许多要向各位dalao学习，如可给予博主些许指导，自当感激涕零！&emsp;&emsp;此后博文如有错误，欢迎各位大神勘误，博主先在此谢过各位；&emsp;&emsp;当然，我也会力保博文的正确；&emsp;&emsp;也欢迎各位同路人与博主一起交流探讨，共同成长～ 另外，小站正在逐步完善中，或许还有些许功能不够完善，博主会在空余时间逐步完善。 欢迎关注！欢迎指导！欢迎交流！","link":"/about/index.html"},{"title":"网站更新日志","text":"下阶段计划： 增加地图/图表显示访客量功能 配置转发功能 配置网页加速 将顶部菜单配置为下拉菜单 将“关于我”页面替换为网页形式的简历 2020.03.08更新 profile修改：E-mail链接到QQ邮我 备案信息修改： 只修改备案信息的点击、已点击格式而不是所有超链接 2020.03.05更新 profile修改 修改头像、名称、motto、地点字号 修改文章、分类、标签数量字号 以“&lt;hr&gt;”横线代替follow关注我 修改social links 图标使用阿里巴巴矢量图标 添加CSDN、Email、RSS 配置为不同页面显示当前页面必要的widget面板 整体 左侧：profile、归档、友情链接 右侧：最新文章、分类、标签云 网站更新日志（page） 左侧：与整体相同 右侧：toc 文章（post） 左侧：与整体相同 右侧：toc 2020.01.18更新 更新语言包，使支持配置顶部navbar菜单语言，并配置为中文； 配置了valine评论功能； 更改首页文章浏览布局： 将标题移动到文章信息上方； 增加显示的文章信息； 文章read more按钮右移，并在左侧添加标签显示； 增加hr线； 增加目录粘性布局 增加“网站更新日志”页面，并编辑； 增加腾讯公益404页面； 2019.12.29更新 取消底部右侧版权声明图标和github图标； 底部左侧信息居中； 2019.12.25更新 增加并编辑了about页面信息； 取消标签（tag）widget页面显示； 2019.12.22更新 文章末尾增加版权声明； 2019.12.21更新 修改了profile页面信息； 将中部主体修改为两栏显示，并指定文章浏览页面只显示文章信息和文章目录； 增加了底部访问量、访客数、建站时间信息； 2019.12.20更新 网站面世；","link":"/webupdatelog/index.html"}],"posts":[{"title":"IDE安装阿里编码规约检查插件","text":"使用阿里编码规约插件，可以自动检测出代码不符合阿里编码规约的代码，进而修正，使用阿里编码规约，可以使代码更规范，避免出现很多低级问题。 IDE安装阿里编码规约检查插件 环境说明： eclipse版本：Photon Release (4.8.0) idea版本：2018.03.06 参考信息： https://github.com/alibaba/p3c 注意区分IDE（Integrated Development Environment ，集成开发环境）和idea（IntelliJ IDEA，JAVA 开发软件，也就是java IDE，与eclipse同类） eclipse中的设置 Help -&gt; Install New Software； 在左上Work with一栏输入 https://p3c.alibaba.com/plugin/eclipse/update ，并按下回车；勾选中间加载出的选项，点击右下Next；下方进度条会开始跑； 进度条走完后，点击Next； 勾选I accept the terms of the license agreement，点击右下Finish； 在跳出来的安全警告中点击Install anyway； 等待eclipse主面板右下方进度条走完； 在跳出来的框中选择Restart Now，重启完成后，插件安装成功； 查看eclipse工具栏，已经有了阿里编码规约扫描按钮，使用时，先点击需要扫描的类或包或项目，然后点击此按钮，扫描结果会在eclipse主面板下方显示，点击扫描按钮旁边的按钮可以修改提示信息的语言（中/英）； idea中的设置在idea的Marketplace安装 通过File-&gt;Settings…或者点击工具栏右侧的扳手按钮打开设置； 选择左侧Plugins，在右侧上部选择Marketplace，在搜索栏中输入 Alibaba Java Coding Guidelines，安装搜索结果中的插件； 安装完成后，重启idea，在工具栏中已经可以看到阿里编码规约扫描按钮； 本地安装 在 https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines/versions 下载最新版本的插件； 同Marketplace安装一样，打开设置，选择Plugins，与Marketplace安装不同的是，这次不选Marketplace，而是选择与Marketplace同行右侧的齿轮按钮，在跳出的菜单中选择Install Plugin from Disk； 在跳出的面板中，找到下载的插件并点击OK； 安装完成后，选择插件信息右侧Restart IDE，重启之后，已经可以在工具栏看到阿里编码规约扫描按钮了； 日拱一卒，功不唐捐！","link":"/2020/02/18/article_00001/"},{"title":"向IDE导入阿里编码规约格式化模板和注释模板","text":"使用阿里编码规约格式化模板，可以使用快捷键以阿里编码规约为依据，快速格式化代码； 向IDE导入阿里编码规约格式化模板和注释模板 环境说明： eclipse版本：Photon Release (4.8.0) idea版本：2018.03.06 文件地址： 阿里编码规约格式化模板和注释模板点这里 EclipseCodeFormatter插件点这里（本地安装用，本文用在线安装方式安装，用不到，但是留在这里，给需要的朋友） 需注意：eclipse可以导入格式化模板和注释模板，但是idea据我所了解到的，只能导入代码格式化模板； 注意区分IDE（Integrated Development Environment ，集成开发环境）和idea（IntelliJ IDEA，JAVA 开发软件，也就是java IDE，与eclipse同类）。 向eclipse导入导入格式化模板 点击Window-&gt;preferences，进入preferences面板； 在preferences面板左侧点击Java-&gt;Code Style-&gt;formatter，在右侧出现的面板中点击import，导入“eclipse-codestyle.xml”（需在文章开头文件地址第一个超链处下载）；； 导入之后，在preferences面板右侧Formatter面板中左上角Active profile下方的下拉栏中选择P3C-CodeStyle，并点击Formatter面板右下角Apply，至此导入格式化模板完成，以后就可以在Eclipse中使用Ctrl+Shift+f组合键以阿里编码规约为依据，快速格式化代码了； 导入注释模板导入注释模板 点击Window-&gt;preferences，进入preferences面板； 在preferences面板左侧点击Java-&gt;Code Style-&gt;Code Templates，在右侧出现的面板中点击import，导入“eclipse-codetemplate.xml”，导入之后，勾选Code Templates面板左下角Automatically add comments for new methods and types，选择右下角Apply； 修改@author信息 导入注释模板之后，需要修改项目中创建文件之后自动生成的@author信息，因为模板本身是取电脑登录帐号的名字，但是我们可能并不想用电脑的登录名来做为@author选项的内容； 首先，点开Code Templates面板左侧Comments，点击Types，选择右侧Edit，修改其中的内容点击右下角OK即可； 向idea导入导入格式化模板 没有idea专用的代码格式化文件，所以只能导入eclipse的代码格式化文件，这就需要用到EclipseCodeFormatter插件； 安装EclipseCodeFormatter插件（在线安装方式） File-&gt;Settings…进入idea的设置页面； 点击左侧Plugins-&gt;右侧上方Marketplace，搜索框输入EclipseCodeFormatter，安装搜索结果，安装之后，重启idea； 导入代码格式化模板文件 File-&gt;Settings…进入idea的设置页面； 点击左侧Other Settings-&gt;Eclipse Code Formatter-&gt;右侧面板左上方Use the Eclipse Code Formatter，点击Eclipse Java Formatter config file选项右侧Browse按钮，导入eclipse-codestyle.xml文件，在下方Profile选项中选择P3C-CodeStyle，勾选下方Optimize Imports(Intellij’s Import Optimizing must be turned ON)，并选择Settings面板右下角OK，至此，向idea导入代码格式化模板文件完成； 日拱一卒，功不唐捐！","link":"/2020/02/19/article_00002/"},{"title":"eclipse、idea、notepad++将tab键输入设置为四个空格","text":"在阿里编码规约中，要求将tab键修改为4个空格，结合了tab键和空格缩进的优点，对编码大有裨益。 eclipse、idea、notepad++将tab键输入设置为四个空格 环境说明： eclipse版本：Photon Release (4.8.0) idea版本：2018.03.06 notepad++版本：v7.8.4 本文是“阿里编码规约系列”，此处的设置是为了实现阿里编码规约的要求，除此方法之外，还可以通过导入阿里编码规约格式化文件实现，导入之后，还需要确认eclipse中的Insert spaces for tabs被选中，确认idea中的Use tab character未被选中，这两个内容在本篇文章中均有包含；另外notepad++不可以导入阿里编码规约格式化文件； eclipse中的设置 Window-&gt; Preferences，进入参数设置页面； Preferences页面左侧General-&gt;Editors-&gt;Text Editors，右侧将Displayed tab with修改为4，勾选Insert spaces for tabs； Preferences页面左侧Java-&gt;Code Style-&gt;Formatter，右侧Edit…，在弹出的页面中选择Indentation，将展开信息中的第一项Tab policy修改为Spaces only；至此，eclipse中的tab-&gt;四个空格设置完成； 验证：点击菜单栏“”，然后在java文件中按下tab键，查看tab的位置是否是四个点，如果是，说明设置成功； idea中的设置 File -&gt; Settings…，打开设置页面； 设置页面左侧Editor-&gt;Code Style-&gt;Java（这里只设置java，其他语言如果用到需自行设置），右侧Use tab character复选框千万不要选！！！，将Tab size、Indent、Continuation indent三项的值都改为4，点击右下角Apply即可； 验证：新建一个java文件，按下tab键，看是否能被分别选中为四个空格，而不是一个整体，如果可以，说明修改成功； notepad++中的设置 设置-&gt;首选项； 首选项面板中，左侧选择“语言”，右下侧勾选“替换为空格”复选框，关闭即可； 验证：勾选菜单栏“”按钮，使用tab键输入，如果是四个点，则是空格，如果是一个指向右边的箭头，则是tab； 日拱一卒，功不唐捐！","link":"/2020/02/21/article_00003/"},{"title":"eclipse、idea、notepad++设置编码为UTF-8，换行符为Unix","text":"根据阿里编码规约，将eclipse、idea、notepad++的编码设置为UTF-8，换行符设置为Unix，有利于编码； eclipse、idea、notepad++设置编码为UTF-8，换行符为Unix 环境说明： eclipse版本：Photon Release (4.8.0) idea版本：2018.03.06 notepad++版本：v7.8.4 eclipse中的设置 Window -&gt; Preferences，进入参数设置页面； Preferences页面左侧General-&gt;Workspaces，右侧Text file encoding选项设置为Other:UTF-8（文本文件编码），New text file line delimiter选项设置为Other:Unix（换行符格式），点击右下角Apply； Preferences页面左侧General-&gt;Content Types，右侧选中Text，将底部的Default encoding选项设置为UTF-8，并点击Update； 还是3中的路径，展开Text（就是3中设置的Text）项，选中Java Properties File选项，将底部的ISO-8859-1更换为UTF-8，并点击右侧Update； Preferences页面左侧Web-&gt;JSP Files，右侧Encoding项设置为ISO 10646/Unicode(UTF-8)，点击右下角Apply； idea中的设置 File -&gt; Setting…，进入设置页面； 左侧Editor-&gt;File Encodings，右侧上部Global Encoding选项和Project Encoding选项设置为UTF-8，下部Default encoding for properties files选项设置为UTF-8，并勾选后面Transparent native-to-ascii conversion复选框，Create UTF-8 files选项设置为with NO BOM，点击右下角Apply，UTF-8编码设置完成； 设置页面左侧Editor-&gt;Code Style，右侧Line separator选项设置为Unix and OS X(\\n)，点击右下角Apply，Unix格式换行符设置完成； notepad++中的设置 设置-&gt;首选项； 左侧“新建”，右侧“格式（行尾）”选项设置为“Unix(LF)”，“编码”选项设置为“UTF-8(无BOM)”，并勾选“适用于打开ANSI文件”； 日拱一卒，功不唐捐！","link":"/2020/02/23/article_00004/"},{"title":"idea添加自定义live template模板","text":"idea有一个非常方便编码的功能，就是Live Template，这个功能的本质就是构建一个常用代码段和一个缩写的映射，在编码时，使用这些缩写就可以快速的输入这些常用的代码块，了解了这些，将大大提高我们的编码效率；当然，除了默认的live template，我们还可以自定义自己的代码模板，在模板中，可以使用一些变量的引用，在带入代码模板的同时带入自定义一些类名、方法名等，提高编码效率。 idea添加自定义live template模板 环境说明：idea版本：2018.03.06参考：IntelliJ IDEA 2018.3 Help-Edit Template Variables Dialog(编辑模板变量对话框) idea知道有这个功能，不知道eclipse有没有 File-&gt;Settings…，进入设置页面； 设置页面左侧Editor-&gt;Live Templates，展开右侧的列表，就可以看见一些常用的、默认的代码模板了，如果在编码的过程中遇到常用的代码段，可以来看看有没有已经定义好的代码模板可用； 现在我们以创建对方法描述的模板为例来自定义自己的代码模板；Live Templates面板右侧上方，依次点击”+”-&gt;Template Group，在弹出的框中填写自定义模板组的名称，这里写MyGroup，将我们自定义的代码模板放在MyGroup模板组里面，与其他默认模板区分开； 接着点击列表中出现的MyGroup模板组，再点击刚才的”+”-&gt;Live Template； 在下方Abbreviation选项中填入自定义的模板对应的缩写，我这里写成mi(method info的首字母缩写)，在Description选项中填入对此模板的描述，在Template text选项中填入模板原文，还有Live Temple面板左下方红色的No applicable context yet.选项，点击后面的Define选项，选择Java，最后记得点击右下角Apply按钮； 1234567//模板原文，复制时删掉此行/** * Method Name : $METHOD_NAME$ * Method Parameter : $METHOD_PARAMETER$ * Method Return Type : $METHOD_RETURN_TYPE$ * Method Description : $END$ */ 在模板原文中可以使用变量，比如这里的模板原文中的 $METHOD_NAME$、$METHOD_PARAMETER$ 、 $END$ 、就是一个变量，在输入时，会置空或用与参数连接的内置或自定义函数来填充，比如若将 $METHOD_ NAME$ 与系统内置的methodName()函数连接起来，在输入的时候，在某方法内部，输入我们设置好的缩写mi，IDE会提示输入，点击之后，会发现在我们设置的方法模板内部，已经将方法名、参数、返回值自动填充好了；如何连接变量与函数表达式呢？先选中一个参数，然后看模板原文右侧上方，有一个Edit variables选项，点击之后，就可以进入绑定的面板，在idea中内置了许多表达式，可以在文首的“参考”信息中查看详细的表达式的解释； 日拱一卒，功不唐捐！","link":"/2020/02/24/article_00005/"},{"title":"IDE添加文件头@author信息","text":"在使用阿里编码规约扫描插件扫描代码的时候，我们会发现这样的提示，这是因为没有在代码中添加包含代码文件创建者、创建日期的注释信息，这篇文章我们来看一下怎样在eclipse和idea中设置@author（作者）@date（日期）信息； IDE添加文件头@author信息 环境说明： eclipse版本：Photon Release (4.8.0) idea版本：2018.03.06 注意区分IDE（Integrated Development Environment ，集成开发环境）和idea（IntelliJ IDEA，JAVA 开发软件，也就是java IDE，与eclipse同类） eclipse中的设置 Window-&gt;Preferences，进入参数设置页面； 参数设置页面左侧Java-&gt;Code Style-&gt;Code Templates，右侧展开Comments，点击Types，点击右侧Eidt…将内容修改为一下内容，并勾选底部Automatically add comments for new methods and types复选框，点击右下角Apply； 1234/* * * @author mychangee * @date ${currentDate:date('YYYY/MM/dd')} */ 在eclipse中新建java文件，可以发现新文件中已经有了@author和@date信息； idea中的设置 File-&gt;Settings…，进入设置页面； 设置页面左侧Editor-&gt;File and Code Temples，右侧依次选中Includes-&gt;File Header(如果没有点击”+”创建一个)，在右侧填写以下内容，记得将${USER}项换成你自己的名字或者昵称，否则会用电脑当前的登录名来作为@author的值，完成之后，点击右下角Apply； 1234/** * @author : ${USER} * @date : ${DATE} ${TIME} */ 在当前项目中新建一个java文件，此时可以发现，新建的java文件中已经包含了@author和@date信息； 日拱一卒，功不唐捐！","link":"/2020/02/24/article_00006/"},{"title":"CentOS7设置host name","text":"在必要时将CentOS 7的主机名设置为自己想要的名字。 CentOS7设置host name 环境说明： 内核版本：3.10.0-1062.9.1.el7.x86_64 本文先使用命令方式将主机名修改为“localhost”，再使用修改文件的方式将主机名修改为“jarvis”，以此演示主机名的修改。 查看hostname 方法一：‘hostname’命令 12[root@jarvis ~]# hostnamejarvis 方法二：‘hostnamectl’命令 123456789101112[root@jarvis ~]# hostnamectl Static hostname: jarvis Pretty hostname: Jarvis Icon name: computer-vm Chassis: vm Machine ID: bb303a4a8b1846ce9ac8531e1b67db9b Boot ID: 81745e108ae64db18eea055db0702bf6 Virtualization: kvm Operating System: CentOS Linux 7 (Core) CPE OS Name: cpe:/o:centos:centos:7 Kernel: Linux 3.10.0-1062.9.1.el7.x86_64 Architecture: x86-64 设置hostname 使用命令设置 hostnamectl set-hostname “主机名” 1234567891011121314[root@jarvis ~]# hostnamectl set-hostname localhost[root@jarvis ~]# hostnamelocalhost[root@jarvis ~]# hostnamectl Static hostname: localhost Icon name: computer-vm Chassis: vm Machine ID: bb303a4a8b1846ce9ac8531e1b67db9b Boot ID: 81745e108ae64db18eea055db0702bf6 Virtualization: kvm Operating System: CentOS Linux 7 (Core) CPE OS Name: cpe:/o:centos:centos:7 Kernel: Linux 3.10.0-1062.9.1.el7.x86_64 Architecture: x86-64 通过修改配置文件设置 1234[root@jarvis ~]# vim /etc/hostname //打开此文件，将其中内容修改为“jarvis”[root@jarvis ~]# reboot //修改文件的方式一定要自启[root@jarvis ~]# hostnamejarvis 日拱一卒，功不唐捐！","link":"/2020/03/04/article_00007/"},{"title":"CentOS 7防火墙操作","text":"通过对防火墙进行自定义，只允许需要的端口通过，关闭非必要端口，提高系统安全性。 CentOS 7防火墙操作 环境说明： 内核版本：3.10.0-1062.9.1.el7.x86_64 CentOS7使用firewall防火墙 防火墙的开/关/重启/自启/关闭自启/查看状态 打开防火墙 1[root@jarvis ~]# systemctl start firewalld 关闭防火墙 1[root@jarvis ~]# systemctl stop firewalld 重启防火墙 1[root@jarvis ~]# systemctl restart firewalld 设置防火墙开机自启 1[root@jarvis ~]# systemctl enable firewalld 关闭防火墙自启功能 1[root@jarvis ~]# systemctl disable firewalld 查看防火墙状态 1[root@jarvis ~]# systemctl status firewalld 防火墙查看已开放端口/开启端口/关闭端口 查看已开放端口 1[root@jarvis ~]# firewall-cmd --list-ports 开启端口（以80端口为例） 参数说明： –zone=public：作用域 –add-port：添加端口和协议 –remove-port：删除端口和协议 –permanent：永久生效 1[root@jarvis ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent 关闭端口（以80端口为例） 1[root@jarvis ~]# firewall-cmd --zone= public --remove-port=80/tcp --permanent 日拱一卒，功不唐捐！","link":"/2020/03/04/article_00008/"},{"title":"CentOS 7修改默认启动界面","text":"指定系统自启动使用的界面（图形界面或者命令行界面）。 CentOS 7修改默认启动界面 环境说明： 内核版本：3.10.0-1062.9.1.el7.x86_64 查看当前默认启动界面123[root@jarvis ~]# systemctl get-defaultmulti-user.target //这个输出说明是命令行界面graphical.target //这个输出说明是图形界面 设置默认启动界面为图形界面1[root@jarvis ~]# systemctl set-default graphical.target 设置默认启动界面为命令行界面1[root@jarvis ~]# systemctl set-default multi-user.target 日拱一卒，功不唐捐！","link":"/2020/03/04/article_00009/"},{"title":"VirtualBox中CentOS 7 NAT+Host only网络配置","text":"在使用VirtualBox虚拟机软件时，使用NAT网络连接外网+实现主机内部局域网，使用Host only网络实现虚拟机与本机互通；分别使用DHCP自动分配ip和静态ip两种，动态ip配置方便，但是会发生变化，静态iip配置麻烦，但是 ip不会发生变化；因为NAT网络用以连接外网，ip具体值不重要，而Host-only主要用于与主机互通，如果经常变化的话就会比较麻烦，所以推荐使用NAT(DHCP)+Host-only(static)的方式配置。 VirtualBox中CentOS 7 NAT+Host only网络配置 环境说明： VirtualBox：版本 6.0.14 r133895 (Qt5.6.2) CentOS 7：内核版本：3.10.0-957.e17.x86_64 NAT网络配置DHCP自动分配ip 左侧选中目标虚拟机，点击右侧上方“设置”； 设置页面，左侧选中“网络”，右侧选中“网卡1”，勾选“启用连接”复选框，连接方式选择“NAT 网络”，界面名称选择“NatNetwork”，点击右下角OK，启动虚拟机，至此NAT网络（dhcp自动分配ip）已经可用； 在网卡配置文件中将网卡配置为开机自启： 123[root#friday ~]# ifconfig //确定网卡名称，其中lo是本地回环网卡，另外的一个就是NAT网卡名称，[root#friday ~]# vim /etc/sysconfig/network-script/ifcfg-enp0s3 //打开网卡配置文件NOBOOT=yes //修改此选项为yes 修改完成后，使用“systemctl restart network”命令重启网卡，就可以使用了。 手动配置静态ip 添加新NAT网络：管理-&gt;全局设定；在全局设定页面，左侧选择“网络”，右侧选择最右侧竖排的“”符号，添加一个新的NAT网络，并且取消此网络的“网络选项：支持DHCP”复选框，并将网络名称修改为“NatNetwork-nodhcp”，点击右下方OK保存； 为虚拟机添加上一步中自建的NAT网络：左侧选中目标虚拟机，点击右侧上方“设置”；设置页面中，左侧选中“网络”，右侧选中“网卡1”，勾选“启用连接”复选框，连接方式选择“NAT 网络”，界面名称选择“NatNetwork-nodhcp”，点击右下角OK保存设置，然后启动虚拟机； 修改网卡配置文件，如下： 12345678[root#friday ~]# vim /etc/sysconfig/network-scripts/ifcfg-enp0s3BOOTPROTO=static # 修改，以静态指定方式获取ipONBOOT=yes # 修改，设置网卡开机自启IPADDR=10.0.2.13 # 添加，网卡ipNETMASK=255.255.255.0 # 添加，掩码DNS1=114.114.114.114DNS2=114.114.115.115 # 这两行都是dns解析服务器地址GATEWAY=10.0.2.1 # 网关 修改完成后，使用”systemctl restart network”命令重启网卡，完成配置。 Host only网络配置DHCP自动分配ip 管理-&gt;主机网络管理器； 如果已有名为VirtualBox Host-Only Etherner Adapter的网络，则无需新建，否则点击左上角“创建”，创建一个新的仅主机网络； 要勾选“VirtualBox Host-Only Etherner Adapter”网络后面的DHCP服务器复选框，下方左侧“网卡”选项选择“自动配置网卡”，下方右侧DHCP服务器选项中，勾选“启用服务器”复选框，点击右下角“应用”； 下面配置虚拟机一端，左侧选中目标虚拟机，右侧点击上方“设置”选项，在设置面板中，左侧选择“网络”，右侧选择“网卡2”，选中“启用网络连接”复选框，“连接方式”选项选择“仅主机(Host-Only)网络”，“界面名称”选项选择“VirtualBox Host-Only Ethernet Adapter”，点击右下方OK，开启虚拟机； 下面修改虚拟机中的网卡配置文件，主要修改以下几项，如果网卡配置文件没有人为修改，其他的选项不需要动； 12345[root#friday ~]# vim /etc/sysconfig/network-scripts/ifcfg-enp0s8BOOTPROTO=dhcp # 本项要修改为dhcp方式获取ipUUID=bbab75d8-0b4b-4987-b675-24d4a3ba87aa # 此项每张网卡的都不一样，无需修改ONBOOT=yes # 本项设置为网卡开机自启HWADDR=08:00:27:B8:28:64 # mac地址，每张网卡都不一样，无需修改 修改完成后，使用“systemctl restart network”命令重启网卡，就可以使用了。 手动配置静态ip 管理-&gt;主机网络管理器； 如果已有名为VirtualBox Host-Only Etherner Adapter #2的网络，则无需新建，否则点击左上角“创建”； Host only采用静态分配ip，所以这里不要勾选网络信息最后面的“DHCP服务器”复选框；下方左侧“网卡”选项选择“手动配置网卡”在“IPv4地址”和“IPv4网络掩码”选项输入想要的ip与子网掩码，这里以192.168.93.1/255.255.255.0为例；下方右侧DHCP服务器选项中，取消“启用服务器”复选框，点击右下角应用； 下面配置虚拟机一端，左侧选中目标虚拟机，右侧点击上方“设置”选项，在设置面板中，左侧选择“网络”，右侧选择“网卡2”，选中“启用网络连接”复选框，“连接方式”选项选择“仅主机(Host-Only)网络”，“界面名称”选项选择“VirtualBox Host-Only Ethernet Adapter #2”，点击右下方OK，开启虚拟机。 下面修改虚拟机中的网卡配置文件，主要修改一下几项： 1234BOOTPROTO=static #修改，指定网卡为静态ipONBOOT=yes #修改IPADDR=192.168.93.13 #添加，指定网卡的静态ipNETMASK=255.255.255.0 #添加，指定上一项匹配的子网掩码 修改完成后，使用“systemctl restart network”命令重启网卡，就可以使用了。 日拱一卒，功不唐捐！","link":"/2020/03/07/article_00010/"},{"title":"hexo静态博客安装详解","text":"Hexo静态博客框架是一个非常易用易配置的博客框架，是搭建博客的不错的选择，本文详细介绍了Hexo博客的搭建步骤，并对博客的操作和配置做了简单的介绍，博客配置的详细内容以后会再开帖详述。 hexo静态博客安装详解 参考文档： CodeSheep-Hexo博客搭建 Hexo官方文档 菜鸟教程 - Node.js 安装配置 淘宝NPM镜像 - 使用说明 Hexo-butterfly主题文档 安装可能会碰到各种问题，一般只要按照步骤，不会有太大问题。但是以防万一，第一、及时拍快照备份，第二、博客目录如果出现问题可以删除重新开始。 准备工作安装nodejs 下载并解压nodejs123[root@Friday ~]# wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz[root@Friday ~]# mkdir -p /usr/software/nodejs //将软件放在此目录下[root@Friday ~]# tar -xvf node-v10.9.0-linux-x64.tar.xz -C /usr/software/nodejs --strip-components 1 创建软链接（快捷方式）12[root@Friday ~]# ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ [root@Friday ~]# ln -s /usr/software/nodejs/bin/node /usr/local/bin/ 验证1234[root@friday ~]# node -v //输出版本号，说明配置成功v10.9.0[root@friday ~]# npm -v //输出版本号，说明配置成功6.2.0 安装cnpm代替nodejs中的npm 安装cnpm1[root@Friday ~]# npm install -g cnpm --registry=https://registry.npm.taobao.org 为cnpm创建软链接1[root@Friday ~]# ln -s /usr/software/nodejs/bin/cnpm /usr/local/bin/ 验证12[root@friday ~]# npm -v //输出版本号，说明配置成功6.2.0 安装git 安装git1[root@Friday ~]# yum install git-core -y 验证12[root@10 ~]# git --version //输出版本号，说明配置成功git version 1.8.3.1 安装hexo 安装hexo 如果报[fsevents@~2.1.2] optional install error: Package require os(darwin) not compatible with your platform(linux)警告，不必理会意思是，可选的安装错误，包要求macos但是你的是linux不兼容； 1[root@Friday ~]# cnpm install -g hexo-cli 为hexo创建软链接1[root@Friday ~]# ln -s /usr/software/nodejs/bin/hexo /usr/local/bin/ 验证1234567891011121314151617[root@friday ~]# hexo -vhexo-cli: 3.1.0os: Linux 3.10.0-957.el7.x86_64 linux x64http_parser: 2.8.0node: 10.9.0v8: 6.8.275.24-node.14uv: 1.22.0zlib: 1.2.11ares: 1.14.0modules: 64nghttp2: 1.32.0napi: 3openssl: 1.1.0iicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 使用hexo搭建博客 创建博客目录 如果安装过程中出现什么问题，可以删除这个目录，重新开始。 12[root@Friday ~]# mkdir blog[root@Friday ~]# cd blog 生成博客1[root@Friday blog]# hexo init 博客配置与操作 对于“博客功能插件配置”、“博客配置文件修改”、“博客主题配置文件修改”这几个主题会重新开帖。这里只做简单介绍。 hexo博客基本操作 hexo d：将静态博客文件部署到远端，需要在博客配置文件中进行配置；hexo n “文章名称”：创建以“文章名称”为名称的文章，不过不建议用中文，执行命令后在博客目录（上面创建的名为blog的目录：blog/source/_port）下生成名为“文章名称.md”的markdown文件；hexo n page “about”：创建about页面，需要在博客配置文件中进行配置；hexo博客使用方法： 使用hexo n “文章名称”命令生成以“文章名称”为名的文章； 使用markdown语法编辑在blog/source/_port/目录下的“文章名称.md”文件； 使用hexo clean命令清理上次生成的静态博客网页文件； 使用hexo g命令重新生成静态博客网页文件； 使用hexo s命令将生成的静态博客网页文件运行在本地机器的4000端口，以便预览自己写的文章或者预览对博客的主题等的修改 确定无误后，使用hexo d命令将静态博客网页文件部署到远端 123456[root@Friday blog]# hexo clean //清理上次生成的静态博客网页文件[root@Friday blog]# hexo g //重新生成静态博客网页文件[root@Friday blog]# hexo s //在本地4000端口运行静态博客[root@Friday blog]# hexo d //将静态博客文件部署到远端[root@Friday blog]# hexo n &quot;文章名称&quot; //创建一篇文章[root@Friday blog]# hexo n page “页面名称” //创建新页面 hexo博客配置文件 在博客目录下面的_config.yml文件中配置XXX等信息，详细方法重开一贴。 1[root@Friday blog]# vim _config.yml hexo博客主题配置文件 在博客目录下的themes/landscape/_config.yml文件中配置XXX等信息，详细方法重开一帖。 1[root@Friday blog]# vim themes/landscape/_config.yml 可能遇到的问题问题一 问题描述：123INFO Checking dependenciesERROR Package cheerio is not installed.ERROR Please install the missing dependencies from the root directory of your Hexo site. 解决方法：1[root@friday blog]# cnpm install cheerio@0.22.0 --save 问题解释cheerio没有安装问题二 问题描述1[fsevents@~2.1.2] optional install error: Package require os(darwin) not compatible with your platform(linux) 解决方法1[root@friday blog]# cnpm rebuild node-sass 问题解释fsevents这个包只能在mac ox系统用，在linux不兼容，这是一个可选错误，可以忽略。 日拱一卒，功不唐捐！","link":"/2020/03/08/article_00011/"}],"tags":[{"name":"IDEA","slug":"IDEA","link":"/tags/IDEA/"},{"name":"Plugins","slug":"Plugins","link":"/tags/Plugins/"},{"name":"eclipse","slug":"eclipse","link":"/tags/eclipse/"},{"name":"代码格式化","slug":"代码格式化","link":"/tags/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"name":"阿里编码规约","slug":"阿里编码规约","link":"/tags/%E9%98%BF%E9%87%8C%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/"},{"name":"Notepad++","slug":"Notepad","link":"/tags/Notepad/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"主机名设置","slug":"主机名设置","link":"/tags/%E4%B8%BB%E6%9C%BA%E5%90%8D%E8%AE%BE%E7%BD%AE/"},{"name":"防火墙","slug":"防火墙","link":"/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"firewall","slug":"firewall","link":"/tags/firewall/"},{"name":"默认启动界面","slug":"默认启动界面","link":"/tags/%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2/"},{"name":"CentOS7","slug":"CentOS7","link":"/tags/CentOS7/"},{"name":"VirtualBox","slug":"VirtualBox","link":"/tags/VirtualBox/"},{"name":"NAT","slug":"NAT","link":"/tags/NAT/"},{"name":"Host-Only","slug":"Host-Only","link":"/tags/Host-Only/"},{"name":"VirtualBox网络配置","slug":"VirtualBox网络配置","link":"/tags/VirtualBox%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"},{"name":"CentOS7网络配置","slug":"CentOS7网络配置","link":"/tags/CentOS7%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"搭建博客","slug":"搭建博客","link":"/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"name":"静态博客","slug":"静态博客","link":"/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"}],"categories":[{"name":"阿里编码规约","slug":"阿里编码规约","link":"/categories/%E9%98%BF%E9%87%8C%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/"},{"name":"CentOS 7配置与使用","slug":"CentOS-7配置与使用","link":"/categories/CentOS-7%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"name":"VirtualBox使用手册","slug":"VirtualBox使用手册","link":"/categories/VirtualBox%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"},{"name":"Hexo静态博客搭建与配置","slug":"Hexo静态博客搭建与配置","link":"/categories/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"}]}